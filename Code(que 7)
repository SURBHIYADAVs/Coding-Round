#include <iostream>

const int row = 5;
const int col = 5;
const int size = row * col;

void findShortestRoutes(const int blockedCells[], int blockedCount) 
{
    int paths[size][size + 1];
    int pathLength[size];

    for (int i = 0; i < size; ++i) 
    {
        for (int j = 0; j <= size; ++j) 
        {
            paths[i][j] = -1;
        }
        pathLength[i] = -1;
    }

    int queue[size * size]; 
    int front = 0, rear = 0;

    queue[rear++] = 0;
    paths[0][0] = 0;
    pathLength[0] = 1;

    while (front < rear) 
    {
        int currentCell = queue[front++];
        int currentPathLength = pathLength[currentCell];
        
        if (currentCell == size - 1) 
        {
            for (int i = 0; i < currentPathLength; ++i) 
            {
                std::cout << paths[currentCell][i] << " ";
            }
            std::cout << std::endl;
            continue;
        }

        for (int move; ) 
        {
            int nextCell = currentCell + move;
                paths[nextCell][currentPathLength] = nextCell;
                pathLength[nextCell] = currentPathLength + 1;
            
        }
    }
}

int main()
{

    int blockedCells[] = {7, 10, 21, 23};
    int blockedCount = sizeof(blockedCells) / sizeof(blockedCells[0]);
    findShortestRoutes(blockedCells, blockedCount);
    return 0;
}
